from instances import generate_instance, save_instance

'''
def grid_instances(export_dir=""):
    """Generate the set of instances over a grid layout
       and homogeneous, bipartite and uniformly distributed risk.
    """
    for dist in ["homogeneous", "bipartite", "uniform"]:
        for size in [(2, 2), (4, 2), (4, 4), (8, 4), (8, 8)]:
            n = size[0]*size[1]
            
            for q in [2**i for i in range(0, 10) if 2**i < n]:
                G = generate_instance(size, nb_origins=1, q=q, topology="grid",
                                      risk_distribution=dist, seed=0)
                save_instance(G, f"{export_dir}/g-n{n}-q{q}-r{dist[0]}.dat")
            
            # We generate one last instance with n-1 worktroops
            G = generate_instance(size, nb_origins=1, q=n-1, topology="grid",
                                  risk_distribution=dist, seed=0)
            save_instance(G, f"{export_dir}/g-n{n}-q{n-1}-r{dist[0]}.dat")
'''

def hex_grid_instances(export_dir=""):
    """Generate the set of instances over a hexagonal grid layout
       and homogeneous, bipartite and uniformly distributed risk.
    """
    for dist in ["homogeneous", "bipartite", "uniform"]:
        # We generate graphs with 8, 16, 32, 64, 128 nodes
        for size in [(3, 2), (7, 2), (8, 5), (15, 6), (15, 14)]:
            # We get the amount of nodes generated by the `size` of the hex grid
            G = generate_instance(size, nb_origins=1, q=1, topology="hexagonal",
                                  risk_distribution=dist, seed=0)
            n = len(G.nodes)
            save_instance(G, f"{export_dir}/h-n{n}-q{1}-r{dist[0]}.dat")

            for q in [2**i for i in range(1, 10) if 2**i < n]:
                G = generate_instance(size, nb_origins=1, q=1, topology="hexagonal",
                                      risk_distribution=dist, seed=0)
                save_instance(G, f"{export_dir}/h-n{n}-q{q}-r{dist[0]}.dat")

            # We generate one last instance with n-1 wt (1 wt for each destination)
            G = generate_instance(size, nb_origins=1, q=n-1, topology="hexagonal",
                                  risk_distribution=dist, seed=0)
            save_instance(G, f"{export_dir}/h-n{n}-q{n-1}-r{dist[0]}.dat")


def main():
#    grid_instances(export_dir="data/instances/grid")
    hex_grid_instances(export_dir="data/instances/hex")


if __name__ == "__main__":
    main()
