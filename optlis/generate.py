import argparse
from pathlib import Path

import numpy as np
import networkx as nx

from optlis.utils import Instance, export_instance


def generate_instance(size=(1, 1), nb_teams=1, seed=0):
    """Generates a problem instance."""
    lattice = nx.triangular_lattice_graph(size[0], size[1])
    g = nx.convert_node_labels_to_integers(lattice)
    rrng, prng = (np.random.default_rng(seed),
                  np.random.default_rng(seed))

    # Set default attributes for all nodes
    nx.set_node_attributes(g, values=0, name="p")
    nx.set_node_attributes(g, values=0, name="q")
    nx.set_node_attributes(g, values=0, name="r")

    # Updates the depot's attributes
    g.nodes[0]["type"] = 0
    g.nodes[0]["q"] = nb_teams

    # Updates the tasks' risk and duration attributes with values
    # from the uniform distributions [0.1, 1] and [1, 11]
    n = len(g.nodes)
    for i, r, p in zip(range(1, n),
                       rrng.uniform(0.1, 1, n),
                       prng.integers(1, 11, n)):
        g.nodes[i]["type"] = 1
        g.nodes[i]["r"] = r
        g.nodes[i]["p"] = p

    return Instance(g)


def generate_benchmark(export_dir="", seed=0):
    """Generate the instance benchmark."""
    # Generates graphs with n = 9, 17, 33, 65 nodes (1 depot + n-1 tasks)
    for size in [(5, 1), (2, 9), (4, 11), (9, 11)]:
        # Gets the amount of nodes generated by the `size` of the hex grid
        # which should be n = 9, 17, 33 and 65 (1 depot + n-1 tasks)
        instance = generate_instance(size, nb_teams=1, seed=0)
        n = len(instance.nodes)
        export_instance(
            instance,
            Path(f"{export_dir}/hx-n{n-1}-pu-ru-q{1}.dat")
        )

        # Generates instances with 2^0, 2^1, ..., 2^log_2(n-1) teams
        for q in [2**i for i in range(1, 10) if 2**i < n] + [n-1]:
            export_instance(
                generate_instance(size, nb_teams=q, seed=0),
                Path(f"{export_dir}/hx-n{n-1}-pu-ru-q{q}.dat")
            )


def from_command_line():
    parser = argparse.ArgumentParser()
    parser.add_argument("export-dir", type=Path,
                        help="directory to export instances (must exist)")
    parser.add_argument("--seed", type=int, default=0,
                        help="seed for the random number generator (default 0)")
    args = vars(parser.parse_args())
    generate_benchmark(args["export-dir"],
                       args["seed"])
